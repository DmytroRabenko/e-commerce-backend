generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

//Модель для користувача
//додати до користувача ще відгуки які він залишав товари, які переглядав
//потім контактні дані для замовлення, адреса, доставка 
model User {
  id          Int        @id @default(autoincrement())
  username    String
  email       String     @unique
  password    String     @db.VarChar(60)
  role        String     @default("user")
  createdAt   DateTime   @default(now())
  wishlist    Wishlist[] // Додано зв'язок з моделлю Wishlist
  cartItems   CartItem[] // Додано зв'язок з моделлю CartItem
  orders      Order[]    // Додано зв'язок з моделлю Order
  reviews     Review[]   // Додано зв'язок з моделлю Review
}
//продукт
model Product {
  id               Int           @id @default(autoincrement())
  title            String
  description      String?
  brand            Brand       @relation(fields: [brandId], references: [id])
  brandId          Int
  seria            String
  price            Float
  sale             Float?
  count            Int
  value            String?  
  media            String[]
  rating           Int            @default(0)
  soldOut          Int            @default(0)
  attributes       ProductAttribute[]
  category         Category       @relation(fields: [categoryId], references: [id])
  categoryId       Int
  mainCategory     MainCategory?  @relation(fields: [mainCategoryId], references: [id])
  mainCategoryId   Int?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @default(now())
  wishlistItems    Wishlist[]    // Додано протилежне поле зв'язку
  cartItems        CartItem[]    // Додано протилежне поле зв'язку
  orderProducts    OrderProduct[] // Додано зв'язок з проміжною таблицею OrderProduct
  reviews          Review[] 
}

model ProductAttribute {
  id            Int      @id @default(autoincrement())
  product       Product  @relation(fields: [productId], references: [id])
  productId     Int
  attributeKey  String
  attributeValue String
}

model Review {
  id          Int       @id @default(autoincrement())
  content     String
  email       String?   //електронна пошта може бути незаданою для зареєстрованих користувачів
  rating      Int       @default(5)// Оцінка від 1 до 5, наприклад
  createdAt   DateTime  @default(now())
  product     Product   @relation(fields: [productId], references: [id])
  productId   Int
  user       User?      @relation(fields: [userId], references: [id]) // Зв'язок необов'язковий для не зареєстрованих користувачів
  userId     Int?
}

//бренд
model Brand {
  id          Int       @id @default(autoincrement())
  name        String
  products    Product[]
}
//категорія
model Category {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  products    Product[]
}
//основна категорія
model MainCategory {
  id          Int       @id @default(autoincrement())
  name        String
  products    Product[]
}
//список бажань
model Wishlist {
  id         Int       @id @default(autoincrement())
  user       User      @relation(fields: [userId], references: [id])
  userId     Int
  product    Product   @relation(fields: [productId], references: [id])
  productId  Int
  createdAt  DateTime  @default(now())
  @@unique([userId, productId])
}
//корзина
model CartItem {
  id         Int       @id @default(autoincrement())
  user       User      @relation(fields: [userId], references: [id])
  userId     Int
  product    Product   @relation(fields: [productId], references: [id])
  productId  Int
  quantity   Int
  createdAt  DateTime  @default(now())
  @@unique([userId, productId])
}
//замовлення
model Order {
  id               Int         @id @default(autoincrement())
  user             User        @relation(fields: [userId], references: [id])
  userId           Int
  products         OrderProduct[] // Змінено зв'язок на проміжну таблицю OrderProduct
  totalPrice       Float
  createdAt        DateTime    @default(now())
  @@unique([userId])
}
//замовлення продукти
model OrderProduct {
  id        Int      @id @default(autoincrement())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  @@unique([orderId, productId])
}
